{
  "scan_id": "fdb7026f-d7c3-414f-87fb-9b3a31c383aa",
  "target": ".",
  "timestamp": "2025-09-19T05:39:04.909528",
  "findings": [
    {
      "title": "Missing JWT Protection: GET /",
      "severity": "MEDIUM",
      "file_path": "jwt server.js",
      "line_number": 11,
      "description": "API endpoint GET / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: POST /",
      "severity": "MEDIUM",
      "file_path": "routes/imageClassification.js",
      "line_number": 19,
      "description": "API endpoint POST / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "POST"
    },
    {
      "title": "Missing JWT Protection: POST /",
      "severity": "MEDIUM",
      "file_path": "routes/upload.js",
      "line_number": 5,
      "description": "API endpoint POST / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "POST"
    },
    {
      "title": "Missing JWT Protection: POST /",
      "severity": "MEDIUM",
      "file_path": "routes/waterIntake.js",
      "line_number": 5,
      "description": "API endpoint POST / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "POST"
    },
    {
      "title": "Missing JWT Protection: POST /",
      "severity": "MEDIUM",
      "file_path": "routes/signup.js",
      "line_number": 11,
      "description": "API endpoint POST / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "POST"
    },
    {
      "title": "Missing JWT Protection: GET /ping",
      "severity": "MEDIUM",
      "file_path": "routes/loginDashboard.js",
      "line_number": 11,
      "description": "API endpoint GET /ping lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET /ping endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/ping', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/ping', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/ping",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: GET /kpi",
      "severity": "MEDIUM",
      "file_path": "routes/loginDashboard.js",
      "line_number": 22,
      "description": "API endpoint GET /kpi lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET /kpi endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/kpi', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/kpi', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/kpi",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: GET /daily",
      "severity": "MEDIUM",
      "file_path": "routes/loginDashboard.js",
      "line_number": 29,
      "description": "API endpoint GET /daily lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET /daily endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/daily', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/daily', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/daily",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: GET /dau",
      "severity": "MEDIUM",
      "file_path": "routes/loginDashboard.js",
      "line_number": 37,
      "description": "API endpoint GET /dau lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET /dau endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/dau', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/dau', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/dau",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: GET /top-failing-ips",
      "severity": "MEDIUM",
      "file_path": "routes/loginDashboard.js",
      "line_number": 45,
      "description": "API endpoint GET /top-failing-ips lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET /top-failing-ips endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/top-failing-ips', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/top-failing-ips', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/top-failing-ips",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: GET /fail-by-domain",
      "severity": "MEDIUM",
      "file_path": "routes/loginDashboard.js",
      "line_number": 52,
      "description": "API endpoint GET /fail-by-domain lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET /fail-by-domain endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/fail-by-domain', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/fail-by-domain', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/fail-by-domain",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: POST /",
      "severity": "MEDIUM",
      "file_path": "routes/login.js",
      "line_number": 11,
      "description": "API endpoint POST / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "POST"
    },
    {
      "title": "Missing JWT Protection: POST /createRecipe",
      "severity": "MEDIUM",
      "file_path": "routes/recipe.js",
      "line_number": 8,
      "description": "API endpoint POST /createRecipe lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST /createRecipe endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/createRecipe', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/createRecipe', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/createRecipe",
      "http_method": "POST"
    },
    {
      "title": "Missing JWT Protection: POST /",
      "severity": "MEDIUM",
      "file_path": "routes/recipe.js",
      "line_number": 10,
      "description": "API endpoint POST / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "POST"
    },
    {
      "title": "Missing JWT Protection: DELETE /",
      "severity": "MEDIUM",
      "file_path": "routes/recipe.js",
      "line_number": 11,
      "description": "API endpoint DELETE / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the DELETE / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.delete('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.delete('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "DELETE"
    },
    {
      "title": "Missing JWT Protection: GET /",
      "severity": "MEDIUM",
      "file_path": "routes/recipeNutritionlog.js",
      "line_number": 27,
      "description": "API endpoint GET / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: POST /",
      "severity": "MEDIUM",
      "file_path": "routes/userfeedback.js",
      "line_number": 8,
      "description": "API endpoint POST / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "POST"
    },
    {
      "title": "Missing JWT Protection: GET /",
      "severity": "MEDIUM",
      "file_path": "routes/healthNews.js",
      "line_number": 44,
      "description": "API endpoint GET / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: POST /",
      "severity": "MEDIUM",
      "file_path": "routes/healthNews.js",
      "line_number": 156,
      "description": "API endpoint POST / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "POST"
    },
    {
      "title": "Missing JWT Protection: PUT /",
      "severity": "MEDIUM",
      "file_path": "routes/healthNews.js",
      "line_number": 214,
      "description": "API endpoint PUT / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the PUT / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.put('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.put('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "PUT"
    },
    {
      "title": "Missing JWT Protection: DELETE /",
      "severity": "MEDIUM",
      "file_path": "routes/healthNews.js",
      "line_number": 238,
      "description": "API endpoint DELETE / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the DELETE / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.delete('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.delete('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "DELETE"
    },
    {
      "title": "Missing JWT Protection: POST /generate-baseline",
      "severity": "MEDIUM",
      "file_path": "routes/systemRoutes.js",
      "line_number": 50,
      "description": "API endpoint POST /generate-baseline lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST /generate-baseline endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/generate-baseline', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/generate-baseline', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/generate-baseline",
      "http_method": "POST"
    },
    {
      "title": "Missing JWT Protection: GET /common",
      "severity": "MEDIUM",
      "file_path": "routes/allergyRoutes.js",
      "line_number": 99,
      "description": "API endpoint GET /common lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET /common endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/common', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/common', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/common",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: POST /check",
      "severity": "MEDIUM",
      "file_path": "routes/allergyRoutes.js",
      "line_number": 127,
      "description": "API endpoint POST /check lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST /check endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/check', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/check', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/check",
      "http_method": "POST"
    },
    {
      "title": "Missing JWT Protection: GET /",
      "severity": "MEDIUM",
      "file_path": "routes/filter.js",
      "line_number": 7,
      "description": "API endpoint GET / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: GET /",
      "severity": "MEDIUM",
      "file_path": "routes/articles.js",
      "line_number": 5,
      "description": "API endpoint GET / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the GET / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.get('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.get('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "GET"
    },
    {
      "title": "Missing JWT Protection: POST /",
      "severity": "MEDIUM",
      "file_path": "routes/contactus.js",
      "line_number": 14,
      "description": "API endpoint POST / lacks JWT authentication middleware",
      "plugin_name": "JWTMissingProtectionPlugin",
      "recommendation": {
        "summary": "Protect the POST / endpoint with authentication middleware.",
        "steps": [
          "Import authentication middleware: const authenticateToken = require('../middleware/authenticateToken');",
          "Add middleware to route: router.post('/', authenticateToken, (req, res) => { /* handler */ });",
          "Ensure JWT configuration is secure: use strong secrets, set appropriate expiration, and handle errors properly."
        ],
        "code": "router.post('/', authenticateToken, (req, res) => {\n  // Your route handler\n});"
      },
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": "/",
      "http_method": "POST"
    },
    {
      "title": "Low Entropy JWT Secret",
      "severity": "MEDIUM",
      "file_path": ".env",
      "line_number": 8,
      "description": "JWT secret appears to have low entropy (predictable patterns).",
      "plugin_name": "JWTConfigurationPlugin",
      "recommendation": "Improve JWT secret security:\n1. Generate a strong secret using crypto:\n   const crypto = require('crypto');\n   const secret = crypto.randomBytes(64).toString('hex');\n\n2. Use environment-specific secrets\n3. Implement secret rotation\n4. Consider using asymmetric keys for larger systems",
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": null,
      "http_method": null
    },
    {
      "title": "Low Entropy JWT Secret",
      "severity": "MEDIUM",
      "file_path": ".env",
      "line_number": 10,
      "description": "JWT secret appears to have low entropy (predictable patterns).",
      "plugin_name": "JWTConfigurationPlugin",
      "recommendation": "Improve JWT secret security:\n1. Generate a strong secret using crypto:\n   const crypto = require('crypto');\n   const secret = crypto.randomBytes(64).toString('hex');\n\n2. Use environment-specific secrets\n3. Implement secret rotation\n4. Consider using asymmetric keys for larger systems",
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": null,
      "http_method": null
    },
    {
      "title": "Direct JWT Usage Instead of AuthService",
      "severity": "MEDIUM",
      "file_path": "middleware.js",
      "line_number": null,
      "description": "Direct jwt.verify() usage detected instead of centralized authService.",
      "plugin_name": "JWTConfigurationPlugin",
      "recommendation": "Centralize JWT verification:\n1. Create AuthService class\n2. Move all JWT operations to AuthService\n3. Use AuthService.verifyToken() in middleware\n4. Add comprehensive error handling",
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": null,
      "http_method": null
    },
    {
      "title": "Incomplete JWT Error Handling",
      "severity": "LOW",
      "file_path": "middleware.js",
      "line_number": null,
      "description": "JWT verification lacks comprehensive error handling.",
      "plugin_name": "JWTConfigurationPlugin",
      "recommendation": "Implement proper JWT error handling:\n1. Handle TokenExpiredError\n2. Handle JsonWebTokenError\n3. Handle NotBeforeError\n4. Add logging for security events\n5. Return appropriate status codes",
      "rule_id": null,
      "rule_name": null,
      "rule_mode": null,
      "confidence": null,
      "route": null,
      "http_method": null
    }
  ],
  "summary": {
    "total": 31,
    "files_scanned": 147,
    "by_severity": {
      "MEDIUM": 30,
      "LOW": 1
    },
    "by_plugin": {
      "JWTMissingProtectionPlugin": 27,
      "JWTConfigurationPlugin": 4
    }
  },
  "scan_info": {
    "target_path": ".",
    "timestamp": "2025-09-19T05:39:04.909528",
    "scanner_version": "2.0.0",
    "stats": {
      "files_scanned": 147,
      "plugins_loaded": 3,
      "total_findings": 31
    }
  }
}