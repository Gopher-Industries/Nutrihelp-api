import sys
import os
import json

# ensure repo root is on path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from core.scanner_engine import SecurityScannerEngine
from core.config_manager import ConfigManager


def test_json_output_includes_rule_metadata(tmp_path):
    # Use a small temp directory with a sample file that triggers legacy rules
    target = tmp_path / "sample"
    target.mkdir()
    sample_file = target / "test.js"
    sample_file.write_text("""
    // sample to trigger api key hardcoded
    const api_key = 'ABC123DEF456GHI789';
    """)

    # Load default config manager
    cfg = ConfigManager(None)
    scanner_cfg = cfg.get_scanner_config()
    engine = SecurityScannerEngine(scanner_cfg)
    # ensure general_security plugin enabled
    plugin_cfgs = cfg.get_enabled_plugins()
    if 'general_security' not in plugin_cfgs:
        plugin_cfgs['general_security'] = {'enabled': True}
    engine.load_plugins(plugin_cfgs)

    results = engine.scan_target(str(target))
    # Serialize to JSON (same as CLI does)
    j = json.loads(json.dumps(results, ensure_ascii=False))

    assert 'findings' in j
    # Require that at least one finding contains the rule metadata keys (if any findings exist)
    if j['findings']:
        f = j['findings'][0]
        assert 'rule_id' in f
        assert 'rule_name' in f
        assert 'confidence' in f
        assert 'rule_mode' in f
