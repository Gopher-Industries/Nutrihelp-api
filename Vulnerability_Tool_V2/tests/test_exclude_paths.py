import os
import sys
import tempfile
import shutil
# Ensure repo root is on sys.path for imports during pytest
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))
from Vulnerability_Tool_V2.core.scanner_engine import VulnerabilityScannerEngine


def setup_sample_repo(tmpdir):
    # Create sample structure
    base = tmpdir
    os.makedirs(os.path.join(base, 'src'), exist_ok=True)
    os.makedirs(os.path.join(base, 'tests'), exist_ok=True)
    os.makedirs(os.path.join(base, 'Vulnerability_Tool_V2'), exist_ok=True)

    with open(os.path.join(base, 'src', 'app.js'), 'w') as f:
        f.write("console.log('hello')\n")

    with open(os.path.join(base, 'tests', 'test_dummy.js'), 'w') as f:
        f.write("describe('dummy', () => {});\n")

    # file that should be excluded
    with open(os.path.join(base, 'Vulnerability_Tool_V2', 'plugins', 'dummy.py'), 'w') as f:
        os.makedirs(os.path.join(base, 'Vulnerability_Tool_V2', 'plugins'), exist_ok=True)
        f.write('# plugin file')

    return base


def test_engine_excludes(tmp_path):
    repo = tmp_path / "sample_repo"
    repo.mkdir()

    # construct folders
    (repo / 'src').mkdir()
    (repo / 'tests').mkdir()
    (repo / 'Vulnerability_Tool_V2').mkdir()
    (repo / 'Vulnerability_Tool_V2' / 'plugins').mkdir(parents=True)

    # create files
    (repo / 'src' / 'app.js').write_text("console.log('ok')\n")
    (repo / 'tests' / 'test_dummy.js').write_text("describe('x', ()=>{})\n")
    (repo / 'Vulnerability_Tool_V2' / 'plugins' / 'plugin.py').write_text("# plugin file\n")

    # configure engine with global excludes
    cfg = {
        'global_exclude_paths': ['tests/', 'Vulnerability_Tool_V2/']
    }
    engine = VulnerabilityScannerEngine(cfg)

    # load only the general_security plugin (it exists in repo); but tests should not rely on plugin detection
    # We will manually register a minimal plugin that returns a finding for each file that contains 'console'
    class DummyPlugin:
        def __init__(self, config=None):
            self.config = config or {}
            self.findings = []
            self.name = 'dummy'

        def get_plugin_info(self):
            return {'name': 'dummy', 'version': '0.0.1'}

        def get_severity_level(self):
            return 'LOW'

        def scan(self, target_path):
            res = []
            for root, dirs, files in os.walk(target_path):
                dirs[:] = [d for d in dirs if not any(p and p in os.path.join(root, d) for p in self.config.get('exclude_paths', []))]
                for fname in files:
                    fpath = os.path.join(root, fname)
                    # use plugin-level file exclusion
                    if any(p and p in fpath for p in self.config.get('exclude_paths', [])):
                        continue
                    try:
                        with open(fpath, 'r') as fh:
                            content = fh.read()
                        if 'console' in content:
                            res.append({ 'title': 'found console', 'file_path': fpath })
                    except Exception:
                        continue
            return res

    # register our dummy plugin
    dp = DummyPlugin()
    engine.plugin_manager.register_plugin(dp)

    result = engine.scan_target(str(repo))

    # findings should not include files under tests/ or Vulnerability_Tool_V2/
    for f in result['findings']:
        fp = f.get('file_path', '')
        assert 'tests/' not in fp
        assert 'Vulnerability_Tool_V2/' not in fp

    # ensure at least one finding from src/app.js exists
    assert any('app.js' in f.get('file_path', '') for f in result['findings'])
