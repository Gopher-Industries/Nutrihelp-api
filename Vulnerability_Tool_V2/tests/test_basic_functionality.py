#!/usr/bin/env python3
"""
Basic functional unit testing for Vulnerability_Tool_V2
tests/test_basic_functionality.py
"""

import unittest
import sys
import os
from pathlib import Path

# Add project root directory to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from core.config_manager import ConfigManager
    from core.scanner_engine import SecurityScannerEngine
    from plugins.base_plugin import BaseSecurityPlugin, SecurityFinding
except ImportError as e:
    print(f"Import error: {e}")
    print("This is expected if modules are not yet implemented")


class TestBasicFunctionality(unittest.TestCase):
    """Basic functionality test class"""

    def setUp(self):
        """Test setup"""
        self.test_config_path = project_root / "config" / "scanner_config.yaml"
    
    def test_config_manager_initialization(self):
        """Test ConfigManager initialization"""
        try:
            config_manager = ConfigManager()
            self.assertIsNotNone(config_manager)
            print("‚úÖ ConfigManager initialization test passed")
        except Exception as e:
            self.skipTest(f"ConfigManager not available: {e}")
    
    def test_scanner_engine_initialization(self):
        """Test SecurityScannerEngine initialization"""
        try:
            config_manager = ConfigManager()
            scanner_config = config_manager.get_scanner_config()
            engine = SecurityScannerEngine(scanner_config)
            self.assertIsNotNone(engine)
            print("‚úÖ SecurityScannerEngine initialization test passed")
        except Exception as e:
            self.skipTest(f"SecurityScannerEngine not available: {e}")
    
    def test_security_finding_creation(self):
        """Test SecurityFinding creation"""
        try:
            finding = SecurityFinding(
                title="Test Finding",
                description="Test Description",
                severity="MEDIUM",
                file_path="/test/path",
                line_number=1,
                plugin_name="TestPlugin"
            )
            self.assertEqual(finding.title, "Test Finding")
            self.assertEqual(finding.severity, "MEDIUM")
            print("‚úÖ SecurityFinding creation test passed")
        except Exception as e:
            self.skipTest(f"SecurityFinding not available: {e}")
    
    def test_base_plugin_interface(self):
        """Test BaseSecurityPlugin interface"""
        try:
            # Create a simple test plugin
            class TestPlugin(BaseSecurityPlugin):
                def get_plugin_info(self):
                    return {
                        'name': 'Test Plugin',
                        'version': '1.0.0',
                        'description': 'Test plugin for unit testing'
                    }
                
                def get_severity_level(self):
                    return 'MEDIUM'
                
                def scan(self, target_path):
                    return []
            
            plugin = TestPlugin()
            info = plugin.get_plugin_info()
            self.assertEqual(info['name'], 'Test Plugin')
            print("‚úÖ BaseSecurityPlugin interface test passed")
        except Exception as e:
            self.skipTest(f"BaseSecurityPlugin not available: {e}")
    
    def test_configuration_file_exists(self):
        """Test configuration file existence"""
        self.assertTrue(self.test_config_path.exists(), 
                       f"Configuration file not found: {self.test_config_path}")
        print("‚úÖ Configuration file existence test passed")
    
    def test_directory_structure(self):
        """Test directory structure"""
        required_dirs = [
            "core",
            "plugins", 
            "config",
            "reports",
            "tests"
        ]
        
        for dir_name in required_dirs:
            dir_path = project_root / dir_name
            self.assertTrue(dir_path.exists(), f"Required directory not found: {dir_name}")
        
        print("‚úÖ Directory structure test passed")


def run_tests():
    """Run all tests"""
    print("üß™ Running basic functionality tests...")
    print("=" * 50)

    # Create test suite
    test_suite = unittest.TestLoader().loadTestsFromTestCase(TestBasicFunctionality)

    # Run tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    print("=" * 50)
    if result.wasSuccessful():
        print("üéâ All basic functionality tests passed!")
        return True
    else:
        print("‚ùå Some tests failed or were skipped")
        return False


if __name__ == '__main__':
    success = run_tests()
    sys.exit(0 if success else 1)