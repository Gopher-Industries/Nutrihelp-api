import sys
import os
import json

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from core.scanner_engine import SecurityScannerEngine
from core.config_manager import ConfigManager
from core.report_renderer import render_html_report


def test_debug_rules_toggle_and_html_output(tmp_path):
    # setup temp dir with files that match debug-mode rules (email/url/ip)
    tdir = tmp_path / "sample2"
    tdir.mkdir()
    f = tdir / "data.txt"
    f.write_text("contact: info@example.com\nlink: https://example.com\nip: 192.168.1.1\n")

    cfg = ConfigManager(None)
    scanner_cfg = cfg.get_scanner_config()

    # Load only the general_security plugin to keep test deterministic
    pcfg = {
        'general_security': {
            'enabled': True,
            'legacy_rules': {'enabled': True, 'include_debug_rules': False}
        }
    }
    engine = SecurityScannerEngine(scanner_cfg)
    engine.load_plugins(pcfg)

    results_no_debug = engine.scan_target(str(tdir))
    # There should be no findings with rule_mode == 'debug'
    assert not any(f.get('rule_mode') == 'debug' for f in results_no_debug.get('findings', []))

    # Now enable debug rules and reload plugins
    pcfg['general_security']['legacy_rules']['include_debug_rules'] = True
    engine = SecurityScannerEngine(scanner_cfg)
    engine.load_plugins(pcfg)
    results_with_debug = engine.scan_target(str(tdir))

    # Now at least one finding should come from a debug-mode rule
    assert any(f.get('rule_mode') == 'debug' for f in results_with_debug.get('findings', []))

    # Generate HTML and assert rule metadata label appears in HTML for the findings
    scan_results = results_with_debug
    html = render_html_report(scan_results)
    assert 'Rule:' in html or 'rule_id' in html or 'Rule ID' in html
