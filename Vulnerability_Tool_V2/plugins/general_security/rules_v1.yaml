- # Legacy rule set extracted from Vulnerability_Scanner_V1.4.py
- # Each rule: id, language, name, severity, regex, description, recommendation
- # Note: regexes are written as raw strings; when loading, compile with re.MULTILINE|re.DOTALL as needed

- id: js_sql_injection_concat
  language: javascript
  name: Sql_Injection_String_Concat
  severity: HIGH
  confidence: HIGH
  regex: |
    \.query\s*\(.*\+.*\)
  description: Detects string concatenation used in DB query calls which may indicate SQL injection risk.
  recommendation: "Use parameterized queries / prepared statements instead of string concatenation."

- id: js_xss_res_send_concat
  language: javascript
  name: XSS_Send_Concatenation
  severity: HIGH
  confidence: HIGH
  regex: |
    res\.send\s*\(.*\+.*\)
  description: Detects concatenation in res.send which may output unescaped user input.
  recommendation: "Sanitize output and avoid concatenating untrusted input into responses."

- id: js_eval
  language: javascript
  name: Eval_Function
  severity: CRITICAL
  confidence: HIGH
  regex: |
    eval\s*\(.*\)
  description: Use of eval() can execute arbitrary code in JS.
  recommendation: "Avoid eval(); use safer alternatives or strict input validation."

- id: js_command_exec
  language: javascript
  name: Command_Injection_Exec
  severity: CRITICAL
  confidence: HIGH
  regex: |
    (exec|execSync|spawn)\s*\(.*\)
  description: Shell execution with concatenated input may cause command injection.
  recommendation: "Use argument arrays and avoid passing untrusted input to shell invocations."

- id: js_api_key_hardcoded
  language: javascript
  name: API_Key_Hardcoded
  severity: HIGH
  confidence: MEDIUM
  regex: |
    api_key\s*=\s*['\"]\S+['\"]
  description: Hardcoded API key detected in code.
  recommendation: "Move keys to environment variables or a secrets manager and remove from source control."

- id: js_eval_function_general
  language: javascript
  name: Eval_General
  severity: CRITICAL
  confidence: HIGH
  regex: |
    (eval\s*\(.*\)|new\s+Function\(.*\))
  description: Dynamic code evaluation or Function constructor usage.
  recommendation: "Avoid dynamic code generation; prefer static functions and strict input handling."
- id: py_eval
  language: python
  name: Python_Eval_Usage
  severity: CRITICAL
  confidence: HIGH
  regex: |
    eval\s*\(.*\)
  description: Use of eval() in Python can execute arbitrary code.
  recommendation: "Avoid eval(); use literal_eval from ast for safe parsing or validate inputs."

- id: py_exec
  language: python
  name: Python_Exec_Usage
  severity: CRITICAL
  confidence: HIGH
  regex: |
    exec\s*\(.*\)
  description: Use of exec() may execute untrusted code.
  recommendation: "Avoid exec(); use safer alternatives and strict validation."

- id: py_os_system
  language: python
  name: OS_System_Popen
  severity: CRITICAL
  confidence: HIGH
  regex: |
    os\.(system|popen)\s*\(.*\)
  description: Use of os.system or popen could allow command injection.
  recommendation: "Use subprocess.run with list arguments and avoid shell=True; validate inputs."

- id: py_pickle_load
  language: python
  name: Pickle_Load
  severity: HIGH
  confidence: HIGH
  regex: |
    pickle\.load\s*\(.*\)
  description: Untrusted pickle deserialization can lead to code execution.
  recommendation: "Avoid pickle.load on untrusted data; use safer serialization formats like JSON."

- id: txt_hardcoded_credentials
  language: text
  name: Hardcoded_Credentials_IN_Text
  severity: HIGH
  confidence: HIGH
  regex: |
    (username|password|token|secret|access[_-]?key)\s*[:=]\s*['"]?\S+['"]?
  description: Possible credentials found in text files.
  recommendation: "Remove credentials from text files and rotate any exposed secrets."

- id: yaml_hardcoded_credentials
  language: yaml
  name: Yaml_Hardcoded_Credentials
  severity: HIGH
  confidence: HIGH
  regex: |
    (username|password|token|secret|access[_-]?key)\s*:\s*['"]?\S+['"]?
  description: Possible credentials stored in YAML files.
  recommendation: "Use env vars or secret stores; ensure YAML files do not contain plain secrets."

- id: txt_jwt_token_like
  language: text
  name: JWT_Token_Like
  severity: MEDIUM
  confidence: MEDIUM
  regex: |
    eyJ[A-Za-z0-9_-]{10,}\.[A-Za-z0-9._-]{10,}\.[A-Za-z0-9._-]{10,}
  description: JWT-like token detected in text; could be an exposed token.
  recommendation: "Verify token exposure and rotate if necessary."

- id: general_sensitive_logging
  language: any
  name: Sensitive_Data_Logging
  severity: MEDIUM
  confidence: LOW
  regex: |
    console\.(log|debug|error|warn)\s*\(.*(password|secret|key|token).*
  description: Logging statements containing sensitive keywords.
  recommendation: "Avoid logging sensitive values; mask or remove them from logs."

- id: js_insecure_token_generation
  confidence: LOW
  language: javascript
  name: Insecure_Token_Generation
  severity: MEDIUM
  regex: |
    Math\.random\s*\(\)
  description: Math.random used for token generation (predictable).
  recommendation: "Use crypto-secure random functions (crypto.randomBytes or similar)."

- id: yml_unsafe_object
  language: yaml
  name: Unsafe_YAML_Object
  severity: HIGH
  confidence: HIGH
  regex: |
    !!python/(object|module|function)
  description: Unsafe YAML tags that can lead to arbitrary code when using unsafe loaders.
  recommendation: "Avoid unsafe YAML tags and use safe_load. Sanitize YAML inputs."

# --- Additional rules extracted from V1.4 ---
- id: js_insecure_file_handling
  language: javascript
  name: Insecure_File_Handling_Fs_Unlink
  severity: MEDIUM
  confidence: LOW
  regex: "fs\\.unlink\\s*\\(.*\\)"
  description: Use of fs.unlink without validation may delete unintended files.
  recommendation: "Validate file paths and avoid deleting files based on untrusted input."

- id: js_insecure_file_upload
  language: javascript
  name: Insecure_File_Upload_Multer
  severity: MEDIUM
  confidence: LOW
  regex: "multer\\s*\\(\\s*\\{.*dest.*}\\s*\\)"
  description: Multer configured with `dest` may store uploaded files without sanitation.
  recommendation: "Validate and sanitize uploaded files; prefer managed storage or enforce strict checks."

- id: js_directory_traversal_readfile
  language: javascript
  name: Directory_Movement_ReadFile
  severity: HIGH
  confidence: HIGH
  regex: "fs\\.readFile\\s*\\(.*\\.\\./.*\\)"
  description: Reading files using ../ may indicate directory traversal vulnerabilities.
  recommendation: "Normalize and validate paths; restrict file reads to allowed directories."

- id: js_dangerous_permission_chmod
  language: javascript
  name: Dangerous_Permission_Level_Fs_Chmod
  severity: MEDIUM
  confidence: LOW
  regex: "fs\\.chmod\\s*\\(.*\\)"
  description: Changing file permissions without care may expose sensitive files.
  recommendation: "Ensure correct permission bits and limit chmod operations to safe contexts."

- id: js_redirects_with_query
  language: javascript
  name: Redirects_With_Query
  severity: HIGH
  confidence: MEDIUM
  regex: "res\\.redirect\\s*\\(.*req\\.query\\..*\\)"
  description: Redirects built from query parameters can lead to open redirect or injection.
  recommendation: "Validate redirect targets and avoid echoing user-controlled URLs."

- id: js_weak_hashing
  language: javascript
  name: Weak_Hashing_Algorithm_JS
  severity: MEDIUM
  confidence: LOW
  regex: "(md5|sha1|des)\\s*\\("
  description: Use of weak hashing algorithms that are cryptographically broken.
  recommendation: "Use modern hashing like bcrypt, scrypt or Argon2 for sensitive data."

- id: js_plaintext_credentials
  language: javascript
  name: Plaintext_Credentials_Assignment
  severity: HIGH
  confidence: HIGH
  regex: "(username|password)\\s*=\\s*[\\'\"]\\S+[\\'\"]"
  description: Assignment of username/password in code suggests plaintext credentials.
  recommendation: "Move credentials to environment variables or secret stores and avoid committing them."

- id: js_insecure_ssl_config
  language: javascript
  name: Insecure_SSL_Config
  severity: MEDIUM
  confidence: LOW
  regex: "server\\.listen\\s*\\(.*http.*\\)"
  description: Server listening over plain HTTP may expose traffic.
  recommendation: "Use TLS/HTTPS in production and avoid serving sensitive endpoints over HTTP."

- id: js_http_called
  language: javascript
  name: HTTP_Call_Used
  severity: LOW
  confidence: LOW
  regex: "http\\.get\\s*\\(.*\\)"
  description: Use of http.get (non-TLS) to call external resources.
  recommendation: "Prefer https requests or ensure transport security when calling endpoints."

- id: js_json_parse_unvalidated
  language: javascript
  name: JSON_Parsing_No_Validation
  severity: HIGH
  confidence: MEDIUM
  regex: |
    JSON\.parse\s*\(.*req\.(body|query|params).*\)
  description: Parsing JSON directly from request parameters without validation.
  recommendation: "Validate request input before parsing; use schema validation."

- id: js_env_vars_in_plaintext
  language: javascript
  name: Environment_Variables_In_Plaintext
  severity: HIGH
  confidence: HIGH
  regex: |
    process\.env\.[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*['"]\S+['"]
  description: Environment variables assigned plaintext values in code.
  recommendation: "Do not set secrets directly in code; use deployment environment variables or secret managers."

- id: js_debug_left_exposed
  language: javascript
  name: Debug_Left_Exposed
  severity: LOW
  confidence: DEBUG
  regex: |
    app\.get\s*\(['"]\.\*/debug.*['"]
  description: Debug endpoints exposed via app.get patterns.
  recommendation: "Remove or protect debug endpoints in production."

- id: js_insecure_file_paths
  language: javascript
  name: Insecure_File_Paths_From_Request
  severity: HIGH
  confidence: HIGH
  regex: |
    (fs\.(readFile|writeFile))\s*\(.*req\.(body|query|params)\.path.*\)
  description: Reading/writing files from request-provided paths can be exploited.
  recommendation: "Validate and sanitize file paths and disallow direct use of user-supplied paths."

- id: js_unsecured_spawn
  language: javascript
  name: Unsecured_Spawn
  severity: CRITICAL
  regex: |
    spawn\s*\(.*\)
  description: Spawn is used; if arguments are user-controlled this may lead to injection.
  recommendation: "Use argument arrays safely and avoid passing untrusted input to spawn."

- id: py_exec_function
  language: python
  name: Python_Exec_Function
  severity: CRITICAL
  confidence: HIGH
  regex: |
    exec\s*\(.*\)
  description: exec() usage in Python may execute arbitrary code.
  recommendation: "Avoid exec(); use safer constructs and strict validation."

- id: py_subprocess_injection
  language: python
  name: Subprocess_Injection
  severity: CRITICAL
  confidence: HIGH
  regex: |
    subprocess\.(Popen|call|run)\s*\(.*\)
  description: Use of subprocess family without argument lists or with shell=True can be dangerous.
  recommendation: "Prefer subprocess.run with list args and shell=False; validate inputs."

- id: py_hardcoded_credentials
  language: python
  name: Python_Hardcoded_Credentials
  severity: HIGH
  confidence: HIGH
  regex: |
    (username|password)\s*=\s*['"]\S+['"]
  description: Hardcoded credentials assignment in Python code.
  recommendation: "Move credentials to environment variables or secrets management."

- id: py_weak_hashing
  language: python
  name: Weak_Hashing_Algorithm_PY
  severity: MEDIUM
  confidence: LOW
  regex: |
    (md5|sha1|des)\s*\(
  description: Weak hashing algorithms used in Python.
  recommendation: "Use modern algorithms suitable for the use case (bcrypt/argon2)."

- id: py_insecure_random
  language: python
  name: Insecure_Random_PY
  severity: MEDIUM
  confidence: LOW
  regex: |
    random\.randint\s*\(.*\)
  description: Use of random.randint for security-sensitive values.
  recommendation: "Use secrets module for cryptographically secure randomness."

- id: py_unverified_ssl
  language: python
  name: Unverified_SSL_Request
  severity: HIGH
  confidence: HIGH
  regex: |
    requests\.get\s*\(.*verify\s*=\s*False.*\)
  description: Ignoring SSL verification in requests can expose to MITM attacks.
  recommendation: "Avoid verify=False; ensure proper certificate validation."

- id: py_dangerous_file_access
  language: python
  name: Dangerous_File_Access_Open
  severity: MEDIUM
  confidence: LOW
  regex: |
    open\s*\(.*\)
  description: Use of open() on untrusted paths may lead to information disclosure or file overwrite.
  recommendation: "Validate paths and avoid opening files based on untrusted input."

- id: py_environ_access
  language: python
  name: Environment_Variables_Exposure_PY
  severity: LOW
  confidence: LOW
  regex: |
    os\.environ\[\s*['"]\S+['"]\s*\]
  description: Direct access to os.environ keys; could be misused if writing to env in code.
  recommendation: "Avoid writing secrets to code; read env safely and do not log secrets."

- id: py_debug_logging
  language: python
  name: Debug_Logging_PY
  severity: MEDIUM
  confidence: LOW
  regex: |
    print\s*\(.*(password|secret|key|token).*\)
  description: Printing sensitive values to stdout in Python.
  recommendation: "Avoid printing secrets; mask or remove sensitive data from logs."

- id: py_deserialization_risk
  language: python
  name: Deserialization_Risk_PY
  severity: HIGH
  confidence: MEDIUM
  regex: |
    json\.loads\s*\(.*\)
  description: Unvalidated JSON deserialization may allow unexpected data handling.
  recommendation: "Validate input schemas and avoid executing deserialized contents."

- id: py_unsecured_spawn
  language: python
  name: Unsecured_Spawn_PY
  severity: CRITICAL
  confidence: HIGH
  regex: |
    os\.spawn\s*\(.*\)
  description: Use of os.spawn can be insecure when inputs are untrusted.
  recommendation: "Prefer subprocess interfaces with validation; avoid spawning with untrusted input."

- id: word_sensitive_keywords
  language: docx
  name: Word_Sensitive_Keywords
  severity: LOW
  confidence: LOW
  regex: |
    (?i)(confidential|private|classified|top secret)
  description: Sensitive document keywords found in Word document content.
  recommendation: "Review documents for sensitive information and secure storage."

- id: word_email_addresses
  language: docx
  name: Word_Email_Addresses
  severity: LOW
  confidence: LOW
  regex: |
    [a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+
  description: Email addresses discovered in Word documents.
  recommendation: "Treat discovered emails as potential PII and handle accordingly."

- id: word_phone_numbers
  language: docx
  name: Word_Phone_Numbers
  severity: LOW
  confidence: LOW
  regex: |
    \b(?:\+\d{1,3})?[-.\s]?(\d{2,4})?[-.\s]?\d{3}[-.\s]?\d{4}\b
  description: Phone numbers discovered in Word documents.
  recommendation: "Treat discovered phone numbers as PII and handle accordingly."

- id: txt_sensitive_keywords
  language: text
  name: Text_Sensitive_Keywords
  severity: LOW
  confidence: LOW
  regex: |
    (?i)\b(confidential|private|classified|secret|token|proprietary)\b
  description: Sensitive words found inside text files.
  recommendation: "Review file and handle any sensitive content according to policy."

- id: txt_email_addresses
  language: text
  name: Text_Email_Addresses
  severity: LOW
  mode: debug
  regex: |
    [a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+
  description: Email addresses detected in text files.
  recommendation: "Consider masking or removing PII from artifacts."

- id: txt_urls
  language: text
  name: Text_URLs
  severity: LOW
  mode: debug
  regex: |
    https?://[^\s]+
  description: URLs detected in text files.
  recommendation: "Inspect external links for potential sensitive endpoints or secrets."

- id: txt_ip_addresses
  language: text
  name: Text_IP_Addresses
  severity: LOW
  mode: debug
  regex: |
    \b(?:\d{1,3}\.){3}\d{1,3}\b
  description: IP addresses found in text files.
  recommendation: "Verify whether IPs are internal and whether disclosure is sensitive."

- id: txt_aws_credentials
  language: text
  name: Text_AWS_Credentials
  severity: HIGH
  regex: |
    AKIA[0-9A-Z]{16}
  description: AWS Access Key ID detected in text files.
  recommendation: "Treat as sensitive; rotate keys and remove from source if found."

- id: txt_api_keys_long
  language: text
  name: Text_API_Keys_Long
  severity: HIGH
  regex: |
    (?i)(api[_-]?key|access[_-]?token)\s*[:=]\s*['"]?[A-Za-z0-9\-_]{20,}['"]?
  description: Long API keys detected in text files.
  recommendation: "Remove keys from files and rotate if necessary."

- id: txt_jwt_tokens
  language: text
  name: Text_JWT_Tokens
  severity: MEDIUM
  regex: |
    eyJ[A-Za-z0-9_-]{10,}\.[A-Za-z0-9._-]{10,}\.[A-Za-z0-9._-]{10,}
  description: JWT-like tokens present in text files.
  recommendation: "Investigate and rotate tokens if they are valid and exposed."
