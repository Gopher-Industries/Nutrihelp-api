#!/usr/bin/env python3
"""
RLS Missing Protection Detector

A simple, robust placeholder implementation that searches your codebase for keywords/statements related to Row-Level Security (RLS). 
If no obvious RLS configuration or enablement statements are found, a warning is returned.
The plugin's output uses a common dictionary structure, making it easy to integrate with your project's existing PluginManager/Scanner.
"""

from __future__ import annotations
import re
import os
import logging
from typing import List, Dict, Optional

try:
    # Base class for project definitions in a formal environment
    from plugins.base_plugin import BaseSecurityPlugin, SecurityFinding
except Exception:
    # Provide a minimal compatible alternative for single-file testing
    class BaseSecurityPlugin:
        name = "BaseSecurityPlugin"
        version = "0.0.0"

        def __init__(self, *a, **k):
            pass

logger = logging.getLogger("PluginManager")


class RLSMissingProtectionPlugin(BaseSecurityPlugin):
    """Plugin for detecting missing Row-Level Security (RLS) protection."""
    
    name = "RLS Missing Protection Detector"
    version = "1.0.0"
    description = "Detect potential missing Row-Level Security (RLS) protections."

    # File type and search keyword/regex
    _target_extensions = (".sql", ".ddl", ".yml", ".yaml", ".py", ".conf", ".ini", ".json")
    _patterns = [
        re.compile(r"row\s*level\s*security", re.I),
        re.compile(r"enable\s+row\s+level\s+security", re.I),
        re.compile(r"alter\s+table\s+.*\s+enable\s+row\s+level\s+security", re.I),
        re.compile(r"\bpolicy\b", re.I),  # SQL POLICY
        re.compile(r"\brls\b", re.I),
        re.compile(r"rls_enabled|enable_rls|row_level_security", re.I),
    ]

    def __init__(self, config: Optional[Dict] = None):
        super().__init__(config)
        self.project_root = os.getcwd()

    def get_plugin_info(self) -> Dict[str, str]:
        """Return plugin information (for loader/UI use)"""
        return {
            "name": self.name,
            "version": self.version,
            "description": self.description,
        }

    def get_severity_level(self) -> str:
        """Default severity level (used when no clear evidence is found)"""
        return "MEDIUM"

    def _is_target_file(self, path: str) -> bool:
        return any(path.lower().endswith(ext) for ext in self._target_extensions)

    def _scan_file(self, path: str) -> List[SecurityFinding]:
        """Scan a single file for RLS patterns - RETURNS STANDARD SecurityFinding objects"""
        findings = []
        try:
            with open(path, "r", encoding="utf-8", errors="ignore") as fh:
                for i, line in enumerate(fh, start=1):
                    for pat in self._patterns:
                        if pat.search(line):
                            # Create standard SecurityFinding object
                            finding = SecurityFinding(
                                title="Possible RLS-related statement found",
                                severity="INFO",
                                file_path=os.path.relpath(path, self.project_root),
                                description=f"Pattern '{pat.pattern}' matched: {line.strip()}",
                                line_number=i,
                                plugin=self.name,
                                recommendation="Review this RLS configuration to ensure it's properly implemented and covers all sensitive data access patterns."
                            )
                            findings.append(finding)
                            break
        except Exception as e:
            logger.debug("Failed to read %s: %s", path, e)
        return findings

    def scan(self, target_path: Optional[str] = None) -> List[SecurityFinding]:
        """
        Run the RLS detection. Returns standard SecurityFinding objects.
        """
        base_path = target_path or self.project_root
        logger.info("Running RLS Missing Protection Detector on %s", base_path)
        findings = []
        found_evidence = False

        for root, dirs, files in os.walk(base_path):
            skip_dirs = {"venv", ".venv", "__pycache__", "node_modules", ".git"}
            dirs[:] = [d for d in dirs if d not in skip_dirs]

            for fname in files:
                fpath = os.path.join(root, fname)
                if not self._is_target_file(fpath):
                    continue
                file_findings = self._scan_file(fpath)
                if file_findings:
                    found_evidence = True
                    findings.extend(file_findings)

        if not found_evidence:
            # Create standard SecurityFinding for missing RLS
            finding = SecurityFinding(
                title="Potential missing Row-Level Security (RLS)",
                severity=self.get_severity_level(),
                file_path="General Project Scan",
                description=(
                    "No obvious RLS-related configuration or SQL statements were detected. "
                    "Ensure that sensitive tables enforce row-level access controls (policies)."
                ),
                line_number=None,
                plugin=self.name,
                recommendation="""To implement Row-Level Security (RLS):

1. Enable RLS on sensitive tables:
   ALTER TABLE your_table ENABLE ROW LEVEL SECURITY;

2. Create RLS policies:
   CREATE POLICY user_isolation_policy ON your_table
   FOR ALL
   USING (user_id = current_user_id());

3. Test RLS effectiveness:
   - Verify different users can only access their own data
   - Confirm superusers bypass RLS as expected
   - Check policy performance impact

4. Consider implementing for these table types:
   - User profiles and personal data
   - Financial records
   - Medical information
   - Private communications
   - Access logs and audit trails"""
            )
            findings.append(finding)
            
        logger.info("RLS detector finished, findings: %d", len(findings))
        return findings

    # Keep run() for backward compatibility
    def run(self) -> List[SecurityFinding]:
        return self.scan()


# Compatible exports / convenience factory + module instance
Plugin = RLSMissingProtectionPlugin
get_plugin = lambda *a, **kw: RLSMissingProtectionPlugin(*a, **kw)
create_plugin = lambda *a, **kw: RLSMissingProtectionPlugin(*a, **kw)
plugin = RLSMissingProtectionPlugin()
__all__ = ["RLSMissingProtectionPlugin", "Plugin", "get_plugin", "create_plugin", "plugin"]