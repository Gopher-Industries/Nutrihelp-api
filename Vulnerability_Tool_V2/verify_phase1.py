#!/usr/bin/env python3
"""
Phase 1 Quick verification script
Verify that the modular infrastructure is built correctly
"""

import os
import sys
import subprocess
from pathlib import Path


def check_file_exists(file_path, description):
    """Check if a file exists"""
    if os.path.exists(file_path):
        print(f"✅ {description}: {file_path}")
        return True
    else:
        print(f"❌ {description}: {file_path} (MISSING)")
        return False

def check_directory_structure():
    """Check directory structure"""
    print("🏗️  Checking directory structure...")
    
    required_dirs = [
        ("core", "Core engine directory"),
        ("plugins", "Plugins directory"),
        ("plugins/jwt_security", "JWT Security plugin directory"),
        ("plugins/rls_security", "RLS Security plugin directory"),
        ("config", "Configuration directory"),
        ("tests", "Tests directory"),
        ("reports", "Reports directory"),
    ]
    
    all_exist = True
    for dir_path, description in required_dirs:
        if os.path.exists(dir_path):
            print(f"✅ {description}: {dir_path}/")
        else:
            print(f"❌ {description}: {dir_path}/ (MISSING)")
            all_exist = False
    
    return all_exist

def check_core_files():
    """Check core files"""
    print("\n🔧 Checking core files...")
    
    required_files = [
        ("plugins/base_plugin.py", "Base plugin class"),
        ("core/scanner_engine.py", "Scanner engine"),
        ("core/config_manager.py", "Configuration manager"),
        ("config/scanner_config.yaml", "Scanner configuration"),
        ("scanner_v2.py", "Main program entry"),
        ("requirements.txt", "Dependencies file"),
    ]
    
    all_exist = True
    for file_path, description in required_files:
        if not check_file_exists(file_path, description):
            all_exist = False
    
    return all_exist

def check_python_syntax():
    """Check Python syntax"""
    print("\n🐍 Checking Python syntax...")
    
    python_files = [
        "plugins/base_plugin.py",
        "core/scanner_engine.py", 
        "core/config_manager.py",
        "scanner_v2.py",
        "tests/test_basic_functionality.py"
    ]
    
    all_valid = True
    for file_path in python_files:
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    compile(f.read(), file_path, 'exec')
                print(f"✅ Syntax check passed: {file_path}")
            except SyntaxError as e:
                print(f"❌ Syntax error {file_path}: {e}")
                all_valid = False
        else:
            print(f"⚠️  File not found: {file_path}")
    
    return all_valid

def test_basic_imports():
    """Test basic imports"""
    print("\n📦 Testing module imports...")
    
    import_tests = [
        ("from plugins.base_plugin import BaseSecurityPlugin", "Base plugin class"),
        ("from core.config_manager import ConfigManager", "Configuration manager"),
        ("from core.scanner_engine import SecurityScannerEngine", "Scanner engine"),
    ]
    
    all_imported = True
    for import_stmt, description in import_tests:
        try:
            exec(import_stmt)
            print(f"✅ Import successful: {description}")
        except ImportError as e:
            print(f"❌ Import failed {description}: {e}")
            all_imported = False
        except Exception as e:
            print(f"❌ Error {description}: {e}")
            all_imported = False
    
    return all_imported

def test_basic_functionality():
    """Test basic functionality"""
    print("\n⚙️  Testing basic functionality...")
    
    try:
        # Test configuration manager
        from core.config_manager import ConfigManager
        config_manager = ConfigManager()
        print("✅ Configuration manager initialized successfully")

        # Test scanner engine
        from core.scanner_engine import SecurityScannerEngine
        engine = SecurityScannerEngine()
        print("✅ Scanner engine initialized successfully")

        # Test base plugin
        from plugins.base_plugin import BaseSecurityPlugin
        print("✅ Base plugin class imported successfully")

        return True
        
    except Exception as e:
        print(f"❌ Functionality test failed: {e}")
        return False

def test_cli_interface():
    """Test command line interface"""
    print("\n🖥️  Testing command line interface...")
    
    try:
        # Test help information
        result = subprocess.run([
            sys.executable, 'scanner_v2.py', '--help'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("✅ Help information displayed correctly")
            return True
        else:
            print(f"❌ Help information failed: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("❌ Command line test timed out")
        return False
    except Exception as e:
        print(f"❌ Command line test failed: {e}")
        return False

def run_unit_tests():
    """Run unit tests"""
    print("\n🧪 Running unit tests...")
    
    if not os.path.exists('tests/test_basic_functionality.py'):
        print("⚠️  Test file not found, skipping unit tests")
        return True
    
    try:
        result = subprocess.run([
            sys.executable, 'tests/test_basic_functionality.py'
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("✅ Unit tests passed")
            print("📊 Test output:")
            for line in result.stdout.split('\n')[-10:]:  # Show last 10 lines
                if line.strip():
                    print(f"   {line}")
            return True
        else:
            print("❌ Unit tests failed")
            print("📊 Test output:", result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("❌ Unit tests timed out")
        return False
    except Exception as e:
        print(f"❌ Unit tests failed: {e}")
        return False

def main():
    """Main verification function"""
    print("🚀 Phase 1 verification started...")
    print("=" * 50)
    
    all_passed = True

    # Check project structure
    checks = [
        ("Directory Structure", check_directory_structure),
        ("Core Files", check_core_files), 
        ("Python Syntax", check_python_syntax),
        ("Module Imports", test_basic_imports),
        ("Basic Functionality", test_basic_functionality),
        ("Command Line Interface", test_cli_interface),
        ("Unit Tests", run_unit_tests),
    ]
    
    results = {}
    
    for check_name, check_func in checks:
        try:
            result = check_func()
            results[check_name] = result
            if not result:
                all_passed = False
        except Exception as e:
            print(f"❌ {check_name} check failed: {e}")
            results[check_name] = False
            all_passed = False

    # Output final results
    print("\n" + "=" * 50)
    print("📋 Phase 1 verification results summary:")

    for check_name, passed in results.items():
        status = "✅ Passed" if passed else "❌ Failed"
        print(f"   {check_name}: {status}")
    
    print("\n" + "=" * 50)
    
    if all_passed:
        print("🎉 Phase 1 verification succeeded!")
        print("✅ All checks passed")
        print("🚀 You can proceed to Phase 2 (JWT Security Plugin Development)")
        return 0
    else:
        print("⚠️  Phase 1 verification failed")
        print("🔧 Please fix the issues based on the error messages above and re-verify")
        return 1

if __name__ == '__main__':
    sys.exit(main())