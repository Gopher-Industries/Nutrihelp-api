#!/usr/bin/env python3
"""
Configuration Manager - handles loading and validation of YAML configuration files
"""

import os
import yaml
import logging
from typing import Dict, Any, Optional
from pathlib import Path


class ConfigManager:
    """Configuration Manager"""
    
    def __init__(self, config_path: Optional[str] = None):
        self.config_path = config_path or self._get_default_config_path()
        self.config: Dict[str, Any] = {}
        self.logger = logging.getLogger("ConfigManager")
        self._load_config()
    
    def _get_default_config_path(self) -> str:
        """Get default config file path"""
        current_dir = Path(__file__).parent
        return str(current_dir.parent / "config" / "scanner_config.yaml")
    
    def _load_config(self):
        """Load config file"""
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    self.config = yaml.safe_load(f) or {}
                self.logger.info(f"Loaded configuration from {self.config_path}")
            else:
                self.logger.warning(f"Config file not found: {self.config_path}")
                self.config = self._get_default_config()
                self.logger.info("Using default configuration")
        except Exception as e:
            self.logger.error(f"Error loading configuration: {e}")
            self.config = self._get_default_config()
    
    def _get_default_config(self) -> Dict[str, Any]:
        """Get default configuration"""
        return {
            'scanner': {
                'name': 'NutriHelp Security Scanner V2.0',
                'version': '2.0.0',
                'file_extensions': ['.js', '.py', '.ts', '.sql'],
                'exclude_directories': ['node_modules', '.git', '__pycache__']
            },
            'plugins': {},
            'reports': {
                'include_source_snippets': True,
                'group_by_severity': True
            }
        }
    
    def get(self, key: str, default: Any = None) -> Any:
        """Get configuration value (supports dot notation)"""
        keys = key.split('.')
        value = self.config
        
        try:
            for k in keys:
                value = value[k]
            return value
        except (KeyError, TypeError):
            return default
    
    def get_scanner_config(self) -> Dict[str, Any]:
        """Get scanner configuration"""
        return self.get('scanner', {})
    
    def get_plugin_config(self, plugin_name: str) -> Dict[str, Any]:
        """Get specific plugin configuration"""
        return self.get(f'plugins.{plugin_name}', {})
    
    def get_enabled_plugins(self) -> Dict[str, Dict[str, Any]]:
        """Get enabled plugin configuration"""
        plugins = self.get('plugins', {})
        enabled_plugins = {}
        
        for plugin_name, plugin_config in plugins.items():
            if plugin_config.get('enabled', True):
                enabled_plugins[plugin_name] = plugin_config
        
        return enabled_plugins
    
    def get_report_config(self) -> Dict[str, Any]:
        """Get report configuration"""
        return self.get('reports', {})
    
    def validate_config(self) -> bool:
        """Validate configuration file"""
        required_sections = ['scanner', 'plugins']
        
        for section in required_sections:
            if section not in self.config:
                self.logger.error(f"Missing required config section: {section}")
                return False

        # Validate scanner configuration
        scanner_config = self.config['scanner']
        if 'name' not in scanner_config or 'version' not in scanner_config:
            self.logger.error("Scanner config missing name or version")
            return False
        
        self.logger.info("Configuration validation passed")
        return True
    
    def reload_config(self):
        """Reload configuration"""
        self._load_config()
    
    def save_config(self, config_path: Optional[str] = None):
        """Save configuration to file"""
        save_path = config_path or self.config_path
        try:
            with open(save_path, 'w', encoding='utf-8') as f:
                yaml.dump(self.config, f, default_flow_style=False, indent=2)
            self.logger.info(f"Configuration saved to {save_path}")
        except Exception as e:
            self.logger.error(f"Error saving configuration: {e}")