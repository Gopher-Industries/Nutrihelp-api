#!/usr/bin/env python3
"""Shared HTML report renderer used by both CLI and API.
Place the common HTML template and rendering logic here so outputs are consistent.
"""
from datetime import datetime
from typing import Dict, Any


def render_html_report(scan_results: Dict[str, Any], config_manager=None) -> str:
    """Render the HTML report from scan_results dict.

    scan_results must contain keys: summary, findings, scan_info
    """
    summary = scan_results.get('summary', {})
    findings = scan_results.get('findings', [])
    scan_info = scan_results.get('scan_info', {})

    # Use the same HTML template as CLI previously used
    html_template = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>NutriHelp Vulnerability Scanner V2.0 Report</title>
        <style>
            * {{ margin: 0; padding: 0; box-sizing: border-box; }}
            body {{ 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 20px; background: #f5f5f5; line-height: 1.6;
            }}
            .container {{ 
                max-width: 1200px; margin: 0 auto; background: white; 
                border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); overflow: hidden;
            }}
            .header {{ 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white; padding: 30px; text-align: center;
            }}
            .header h1 {{ font-size: 2.5em; margin-bottom: 10px; }}
            .header .meta {{ opacity: 0.9; font-size: 1.1em; }}
            .stats {{ 
                display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
                gap: 20px; padding: 30px; background: #f8f9fa;
            }}
            .stat-item {{ 
                text-align: center; padding: 20px; background: white; 
                border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }}
            .stat-number {{ font-size: 2.5em; font-weight: bold; margin-bottom: 5px; }}
            .stat-label {{ color: #666; font-size: 1.1em; }}
            .critical {{ color: #dc3545; }}
            .high {{ color: #fd7e14; }}
            .medium {{ color: #ffc107; }}
            .low {{ color: #28a745; }}
            .content {{ padding: 30px; }}
            .section-title {{ 
                font-size: 1.8em; margin-bottom: 20px; color: #2c3e50;
                border-bottom: 3px solid #667eea; padding-bottom: 10px;
            }}
            .finding {{ 
                border: 1px solid #dee2e6; border-radius: 8px; 
                margin-bottom: 20px; overflow: hidden; transition: transform 0.2s ease;
            }}
            .finding:hover {{ transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }}
            .finding-header {{ 
                padding: 15px 20px; display: flex; 
                justify-content: space-between; align-items: center;
                background: #f8f9fa; border-bottom: 1px solid #dee2e6;
            }}
            .finding-title {{ 
                font-size: 1.2em; font-weight: bold; color: #2c3e50; 
                margin: 0; flex-grow: 1;
            }}
            .severity {{ 
                padding: 5px 15px; border-radius: 20px; 
                color: white; font-weight: bold; font-size: 0.9em;
                text-transform: uppercase; margin-left: 15px;
            }}
            .severity.critical {{ background: #dc3545; }}
            .severity.high {{ background: #fd7e14; }}
            .severity.medium {{ background: #ffc107; color: #333; }}
            .severity.low {{ background: #28a745; }}
            .severity.info {{ background: #17a2b8; }}
            
            .file-info {{ 
                padding: 12px 20px; background: #e9ecef; 
                font-family: 'Courier New', monospace; font-size: 0.9em; 
                color: #495057; border-bottom: 1px solid #dee2e6;
                display: flex; align-items: center;
            }}
            .file-info .file-icon {{ 
                margin-right: 8px; color: #6c757d; 
            }}
            
            .description {{ 
                padding: 20px; color: #495057; 
                background: white; font-size: 1em;
                border-bottom: 1px solid #f1f3f4;
            }}
            
            .recommendation {{ 
                padding: 20px; background: #e3f2fd; 
                border-left: 4px solid #2196f3;
                color: #0d47a1; position: relative;
            }}
            .recommendation strong {{ 
                color: #1976d2; font-size: 1.1em;
                display: block; margin-bottom: 10px;
            }}
            .recommendation .rec-section {{
                margin: 15px 0;
            }}
            .recommendation .rec-section h4 {{
                color: #1976d2; margin-bottom: 8px; font-size: 1.05em;
            }}
            .recommendation .rec-code {{
                background: #f5f5f5; padding: 12px; border-radius: 4px;
                font-family: 'Courier New', monospace; font-size: 0.9em;
                color: #333; margin: 8px 0; overflow-x: auto;
                border: 1px solid #ddd;
            }}
            .recommendation ol, .recommendation ul {{
                margin: 10px 0 10px 20px;
            }}
            .recommendation li {{
                margin: 5px 0;
            }}
            
            .plugin-info {{
                padding: 8px 20px; background: #f8f9fa; 
                font-size: 0.85em; color: #6c757d;
                text-align: right; border-top: 1px solid #e9ecef;
            }}
            
            .no-issues {{ 
                text-align: center; padding: 60px 20px; 
                background: #d4edda; color: #155724; border-radius: 8px;
            }}
            .no-issues h2 {{ font-size: 2em; margin-bottom: 15px; }}
            .footer {{ 
                text-align: center; padding: 30px; 
                background: #2c3e50; color: white;
            }}
            .footer p {{ margin: 5px 0; }}
            
            @media (max-width: 768px) {{
                .finding-header {{ flex-direction: column; align-items: flex-start; }}
                .severity {{ margin-left: 0; margin-top: 10px; }}
                .stats {{ grid-template-columns: 1fr 1fr; }}
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üîí NutriHelp Security Scanner V2.0</h1>
                <div class="meta">
                    <div>Scan time: {timestamp}</div>
                    <div>Target path: {target_path}</div>
                    <div>Scanner version: {scanner_version}</div>
                </div>
            </div>
            
            <div class="stats">
                <div class="stat-item">
                    <div class="stat-number critical">{critical_count}</div>
                    <div class="stat-label">Critical Issues</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number high">{high_count}</div>
                    <div class="stat-label">High Severity</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number medium">{medium_count}</div>
                    <div class="stat-label">Medium Severity</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number low">{low_count}</div>
                    <div class="stat-label">Low Severity</div>
                </div>
            </div>
            
            <div class="content">
                <div class="stats">
                    <div class="stat-item">
                        <div class="stat-number">{files_scanned}</div>
                        <div class="stat-label">Files Scanned</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">{plugins_used}</div>
                        <div class="stat-label">Plugins Used</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">{total_findings}</div>
                        <div class="stat-label">Total Issues</div>
                    </div>
                </div>
                
                {findings_html}
            </div>
            
            <div class="footer">
            <p>Generated by <strong>NutriHelp Vulnerability Scanner V2.0</strong></p>
                <p>For support, visit our documentation or contact the development team</p>
            </div>
        </div>
    </body>
    </html>
    """

    # Generate HTML for findings
    if not findings:
        findings_html = '<div class="no-issues"><h2>‚úÖ No Vulnerabilities Found!</h2><p>Your codebase has passed all vulnerability checks.</p></div>'
    else:
        findings_html = '<h2 class="section-title">üîç Detailed Findings</h2>'

        # Sort by severity
        sorted_findings = sorted(findings, key=lambda x: {
            'CRITICAL': 0, 'HIGH': 1, 'MEDIUM': 2, 'LOW': 3, 'INFO': 4
        }.get(x.get('severity', 'MEDIUM'), 2))
        
        for finding in sorted_findings:
            severity = finding.get('severity', 'MEDIUM').lower()
            # Format recommendation: support structured object or plain text
            recommendation = finding.get('recommendation', None)
            formatted_recommendation = ''

            if isinstance(recommendation, dict):
                parts = []
                rec_summary = recommendation.get('summary')
                steps = recommendation.get('steps', [])
                code = recommendation.get('code', '')

                if rec_summary:
                    parts.append(f"<p><strong>{rec_summary}</strong></p>")
                if steps:
                    parts.append('<ol>')
                    for s in steps:
                        parts.append(f"<li>{s}</li>")
                    parts.append('</ol>')
                if code:
                    parts.append(f"<pre class=\"rec-code\">{code}</pre>")

                formatted_recommendation = '\n'.join(parts)
            elif isinstance(recommendation, str) and recommendation:
                formatted_recommendation = recommendation.replace("\n\n", "</p><p>").replace("\n", "<br>")
            else:
                formatted_recommendation = '<p>Please review this security issue and take appropriate remediation steps.</p>'

            finding_html = f"""
            <div class="finding">
                <div class="finding-header">
                    <div class="finding-title">{finding.get('title','')}</div>
                    <span class="severity {severity}">{finding.get('severity','MEDIUM')}</span>
                </div>
                
                <div class="file-info">
                    <span class="file-icon">üìÑ</span>
                    {finding.get('file_path','')}
                    {f" (Line {finding.get('line_number')})" if finding.get('line_number') else ''}
                </div>
                
                <div class="description">{finding.get('description','')}</div>
                
                <!-- rule metadata -->
                {f"<div class='file-info'>Rule: {finding.get('rule_id')} - {finding.get('rule_name')}</div>" if finding.get('rule_id') or finding.get('rule_name') else ''}
                
                <div class="recommendation">
                    <strong>üí° Recommendation:</strong>
                    {formatted_recommendation}
                </div>
                
                <div class="plugin-info">
                    Plugin: {finding.get('plugin_name', finding.get('plugin', 'Unknown'))}
                    {f" | Rule: {finding.get('rule_id') or ''}{(' - ' + finding.get('rule_name')) if finding.get('rule_name') else ''}" if finding.get('rule_id') or finding.get('rule_name') else ''}
                </div>
            </div>
            """
            findings_html += finding_html

    # Format timestamp safely
    timestamp = (
        scan_results.get('timestamp') or 
        scan_info.get('timestamp') or 
        datetime.now().isoformat()
    )
    try:
        if 'Z' in str(timestamp):
            timestamp_obj = datetime.fromisoformat(str(timestamp).replace('Z', '+00:00'))
        else:
            timestamp_obj = datetime.fromisoformat(str(timestamp))
        formatted_timestamp = timestamp_obj.strftime('%Y-%m-%d %H:%M:%S')
    except Exception:
        formatted_timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    return html_template.format(
        timestamp=formatted_timestamp,
        target_path=scan_info.get('target_path', '../'),
        scanner_version=scan_info.get('scanner_version', '2.0.0'),
        critical_count=summary.get('by_severity', {}).get('CRITICAL', 0),
        high_count=summary.get('by_severity', {}).get('HIGH', 0),
        medium_count=summary.get('by_severity', {}).get('MEDIUM', 0),
        low_count=summary.get('by_severity', {}).get('LOW', 0),
        files_scanned=scan_info.get('stats', {}).get('files_scanned', 0),
        plugins_used=scan_info.get('stats', {}).get('plugins_loaded', 0),
        total_findings=summary.get('total', 0),
        findings_html=findings_html
    )
