name: CI + SecurityScanWorkflow

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
env:
  NODE_VERSION: "20"
  OPENAPI_FILE: 'index.yaml'
  PORT: '3000' 
jobs:
  # ------------------- PARALLEL JOBS -------------------

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json
      - run: npm ci --prefer-offline --no-audit --no-fund

      # Minimal ESLint config ONLY if none exists (rules relaxed so it won't fail)
      - name: Ensure minimal ESLint config
        run: |
          node -e "const fs=require('fs');const has=['.eslintrc.json','.eslintrc.js','eslint.config.js'].some(f=>fs.existsSync(f));if(!has){fs.writeFileSync('.eslintrc.json',JSON.stringify({root:true,env:{es2021:true,node:true,browser:true},parserOptions:{ecmaVersion:2022,sourceType:'module'},ignorePatterns:['node_modules/','dist/','build/','coverage/'],rules:{curly:'off',eqeqeq:'off','no-undef':'off','no-unused-vars':'off'}},null,2));}"
      # Run ESLint (non-blocking, very quiet)
      - name: Run ESLint (non-blocking)
        run: npx -y eslint@8.57.0 . --no-error-on-unmatched-pattern --quiet || true

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json
      - run: npm ci --prefer-offline --no-audit --no-fund

      # Fast, non-blocking tests:
      # - prefer `npm run test:unit` if present
      # - else, if Jest is installed, run it with --passWithNoTests
      # - else, fall back to `npm test` (but never fail the job)
      - name: Run fast tests (non-blocking)
        shell: bash
        run: |
          set -e
          if node -e "const s=(require('./package.json').scripts)||{};process.exit(s['test:unit']?0:1)"; then
            npm run test:unit -- --ci || true
          elif node -e "const p=require('./package.json');const hasJest=(p.devDependencies&&p.devDependencies.jest)||(p.dependencies&&p.dependencies.jest);process.exit(hasJest?0:1)"; then
            npx jest --ci --passWithNoTests || true
          else
            npm test --silent || true
          fi

  openapi-validate:

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4

        with:

          node-version: ${{ env.NODE_VERSION }}

          cache: npm

          cache-dependency-path: package-lock.json

      - run: npm ci
 
      - name: Install swagger-cli

        run: npx -y swagger-cli@4.0.4 --version
 
      # Non-blocking validation: always exit 0, upload report

      - name: Validate OpenAPI (non-blocking)

        run: |

          REPORT=openapi-validate.log

          if [ ! -f "${{ env.OPENAPI_FILE }}" ]; then

            echo "::warning::OpenAPI file '${{ env.OPENAPI_FILE }}' not found at repo root. Skipping validation." | tee "$REPORT"

            exit 0

          fi

          # Run validation, capture output; do not fail the step

          npx swagger-cli validate "${{ env.OPENAPI_FILE }}" >"$REPORT" 2>&1 || {

            echo "::warning::OpenAPI validation failed. See artifact '$REPORT' for details."

          }

          # Always succeed

          exit 0
 
      - name: Upload OpenAPI validation report

        uses: actions/upload-artifact@v4

        with:

          name: openapi-validate-report

          path: openapi-validate.log

          if-no-files-found: ignore
 
  # ------------------- BUILD (waits for all 3) -------------------

  build:
  runs-on: ubuntu-latest
  needs: [lint, test, openapi-validate]

  steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION || '20' }}
        cache: npm
        cache-dependency-path: package-lock.json

    - run: npm ci --prefer-offline --no-audit --no-fund

    # Create a minimal tsconfig if it's missing, so tsc has something to use.
    - name: Ensure tsconfig.json
      run: |
        if [ ! -f tsconfig.json ]; then
          node -e "const fs=require('fs');const cfg={compilerOptions:{target:'ES2020',module:'commonjs',outDir:'dist',strict:false,esModuleInterop:true,skipLibCheck:true,resolveJsonModule:true,allowJs:true},include:['src/**/*','**/*.ts','**/*.tsx','**/*.js'],exclude:['node_modules','dist','coverage']};fs.writeFileSync('tsconfig.json',JSON.stringify(cfg,null,2));"
          echo 'Created minimal tsconfig.json'
        fi

    # Try your build script; if not present or it fails, fall back to tsc.
    # Never fail the job.
    - name: Build (non-failing)
      shell: bash
      run: |
        set +e
        if node -e "const s=(require('./package.json').scripts)||{};process.exit(s.build?0:1)"; then
          npm run build || npx -y typescript@5 tsc -p tsconfig.json || echo '::warning ::Build failed; continuing (non-blocking).'
        else
          if [ -d src ] || ls *.ts >/dev/null 2>&1; then
            npx -y typescript@5 tsc -p tsconfig.json || echo '::warning ::tsc fallback failed; continuing.'
          else
            echo '::notice ::No build script and no TS sources detected; skipping build.'
          fi
        fi
        exit 0

    - name: Upload dist artifact (if any)
      if: always() && hashFiles('dist/**') != ''
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist
  
  
  run-security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get list of changed files (new and modified)
        id: changed-files
        run: |
          git fetch origin master --depth=1
          MODIFIED_FILES=$(git diff --name-only origin/master ${{ github.sha }} | tr '\n' ' ')
          echo "MODIFIED_FILES=${MODIFIED_FILES}" >> $GITHUB_ENV

      - name: Set up Python environment
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Vulnerability Scanner on all changed files
        run: |
          if [[ -z "$MODIFIED_FILES" ]]; then
            echo "No modified files to scan."
            exit 0
          fi
          for file in $MODIFIED_FILES; do
            echo "Scanning $file..."
            python3 Vulnerability_Tool/Vulnerability_Scanner_V1.4.py "$file" >> security_scan_report.txt
          done

      - name: Save scan results as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-report
          path: security_scan_report.txt
