name: CI + SecurityScanWorkflow

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
env:
  NODE_VERSION: "20"
  OPENAPI_FILE: 'index.yaml'
jobs:
  # ------------------- PARALLEL JOBS -------------------

  lint:

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4

        with:

          node-version: ${{ env.NODE_VERSION }}

          cache: npm

          cache-dependency-path: package-lock.json

      - run: npm ci
 
      # Ensure ESLint v8 exists even if not pinned

      - name: Ensure ESLint v8 is available

        run: npx -y eslint@8.57.0 -v
 
      # Minimal config if none is present

      - name: Bootstrap ESLint config if missing

        run: |

          if [ ! -f ".eslintrc.json" ] && [ ! -f ".eslintrc.js" ] && [ ! -f "eslint.config.js" ]; then

            cat > .eslintrc.json <<'EOF'

            {

              "env": { "es2021": true, "node": true, "browser": true },

              "extends": ["eslint:recommended"],

              "parserOptions": { "ecmaVersion": 2022, "sourceType": "module" },

              "ignorePatterns": ["node_modules/", "dist/", "build/", "coverage/"],

              "rules": {

                "no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],

                "eqeqeq": "error",

                "curly": "error"

              }

            }

            EOF

          fi

      - name: Run ESLint

        run: npx eslint . --max-warnings=0
 
  test:

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4

        with:

          node-version: ${{ env.NODE_VERSION }}

          cache: npm

          cache-dependency-path: package-lock.json

      - run: npm ci

      - run: npm test -- --ci
 
  openapi-validate:

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4

        with:

          node-version: ${{ env.NODE_VERSION }}

          cache: npm

          cache-dependency-path: package-lock.json

      - run: npm ci
 
      - name: Install swagger-cli

        run: npx -y swagger-cli@4.0.4 --version
 
      # Non-blocking validation: always exit 0, upload report

      - name: Validate OpenAPI (non-blocking)

        run: |

          REPORT=openapi-validate.log

          if [ ! -f "${{ env.OPENAPI_FILE }}" ]; then

            echo "::warning::OpenAPI file '${{ env.OPENAPI_FILE }}' not found at repo root. Skipping validation." | tee "$REPORT"

            exit 0

          fi

          # Run validation, capture output; do not fail the step

          npx swagger-cli validate "${{ env.OPENAPI_FILE }}" >"$REPORT" 2>&1 || {

            echo "::warning::OpenAPI validation failed. See artifact '$REPORT' for details."

          }

          # Always succeed

          exit 0
 
      - name: Upload OpenAPI validation report

        uses: actions/upload-artifact@v4

        with:

          name: openapi-validate-report

          path: openapi-validate.log

          if-no-files-found: ignore
 
  # ------------------- BUILD (waits for all 3) -------------------

  build:

    runs-on: ubuntu-latest

    needs: [lint, test, openapi-validate]   # still fans-in after all three ran

    steps:

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4

        with:

          node-version: ${{ env.NODE_VERSION }}

          cache: npm

          cache-dependency-path: package-lock.json

      - run: npm ci

      - run: npm run build
  
  
  run-security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get list of changed files (new and modified)
        id: changed-files
        run: |
          git fetch origin master --depth=1
          MODIFIED_FILES=$(git diff --name-only origin/master ${{ github.sha }} | tr '\n' ' ')
          echo "MODIFIED_FILES=${MODIFIED_FILES}" >> $GITHUB_ENV

      - name: Set up Python environment
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Vulnerability Scanner on all changed files
        run: |
          if [[ -z "$MODIFIED_FILES" ]]; then
            echo "No modified files to scan."
            exit 0
          fi
          for file in $MODIFIED_FILES; do
            echo "Scanning $file..."
            python3 Vulnerability_Tool/Vulnerability_Scanner_V1.4.py "$file" >> security_scan_report.txt
          done

      - name: Save scan results as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-report
          path: security_scan_report.txt
