name: CI + SecurityScanWorkflow

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
env:
  NODE_VERSION: "20"
  OPENAPI_FILE: 'index.yaml'
  PORT: '3000' 
jobs:
  # ------------------- PARALLEL JOBS -------------------

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json
      - run: npm ci

      # Create a tiny ESLint config ONLY if none exists (prevents "no config" failures)
      - name: Ensure minimal ESLint config
        run: |
          node -e "const fs=require('fs');const has=['.eslintrc.json','.eslintrc.js','eslint.config.js'].some(f=>fs.existsSync(f));if(!has){fs.writeFileSync('.eslintrc.json','{\"env\":{\"es2021\":true,\"node\":true,\"browser\":true},\"extends\":[\"eslint:recommended\"],\"parserOptions\":{\"ecmaVersion\":2022,\"sourceType\":\"module\"},\"ignorePatterns\":[\"node_modules/\",\"dist/\",\"build/\",\"coverage/\"],\"rules\":{\"no-unused-vars\":[\"warn\",{\"argsIgnorePattern\":\"^_\"}],\"eqeqeq\":\"error\",\"curly\":\"error\"}}');}"

      # Pin ESLint to v8 so classic config works
      - name: Run ESLint
        run: npx -y eslint@8.57.0 . --max-warnings=0
    
  test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json
      - run: npm ci

      # Start the API only if a start script exists; otherwise just run tests.
      - name: Maybe start API for integration tests
        shell: bash
        run: |
          set -e
          HAS_START_TEST=$(node -p "try{require('./package.json').scripts['start:test']?'yes':'no'}catch(e){'no'}")
          HAS_START=$(node -p "try{require('./package.json').scripts['start']?'yes':'no'}catch(e){'no'}")
          HAS_DEV=$(node -p "try{require('./package.json').scripts['dev']?'yes':'no'}catch(e){'no'}")

          if [ "$HAS_START_TEST" = "yes" ]; then
            npm run start:test & echo $! > server.pid
          elif [ "$HAS_START" = "yes" ]; then
            npm start & echo $! > server.pid
          elif [ "$HAS_DEV" = "yes" ]; then
            npm run dev & echo $! > server.pid
          fi

          if [ -f server.pid ]; then
            npx -y wait-on@7 "tcp:localhost:${{ env.PORT }}" || npx -y wait-on@7 "http://localhost:${{ env.PORT }}/health" || true
          fi

      - name: Run tests
        run: npm test -- --ci
        # If your tests hang due to open handles, add:  --forceExit

      - name: Stop API (if started)
        if: always()
        shell: bash
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm -f server.pid
          fi

  openapi-validate:

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4

        with:

          node-version: ${{ env.NODE_VERSION }}

          cache: npm

          cache-dependency-path: package-lock.json

      - run: npm ci
 
      - name: Install swagger-cli

        run: npx -y swagger-cli@4.0.4 --version
 
      # Non-blocking validation: always exit 0, upload report

      - name: Validate OpenAPI (non-blocking)

        run: |

          REPORT=openapi-validate.log

          if [ ! -f "${{ env.OPENAPI_FILE }}" ]; then

            echo "::warning::OpenAPI file '${{ env.OPENAPI_FILE }}' not found at repo root. Skipping validation." | tee "$REPORT"

            exit 0

          fi

          # Run validation, capture output; do not fail the step

          npx swagger-cli validate "${{ env.OPENAPI_FILE }}" >"$REPORT" 2>&1 || {

            echo "::warning::OpenAPI validation failed. See artifact '$REPORT' for details."

          }

          # Always succeed

          exit 0
 
      - name: Upload OpenAPI validation report

        uses: actions/upload-artifact@v4

        with:

          name: openapi-validate-report

          path: openapi-validate.log

          if-no-files-found: ignore
 
  # ------------------- BUILD (waits for all 3) -------------------

  build:

    runs-on: ubuntu-latest

    needs: [lint, test, openapi-validate]   # still fans-in after all three ran

    steps:

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4

        with:

          node-version: ${{ env.NODE_VERSION }}

          cache: npm

          cache-dependency-path: package-lock.json

      - run: npm ci

      - run: npm run build
  
  
  run-security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get list of changed files (new and modified)
        id: changed-files
        run: |
          git fetch origin master --depth=1
          MODIFIED_FILES=$(git diff --name-only origin/master ${{ github.sha }} | tr '\n' ' ')
          echo "MODIFIED_FILES=${MODIFIED_FILES}" >> $GITHUB_ENV

      - name: Set up Python environment
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Vulnerability Scanner on all changed files
        run: |
          if [[ -z "$MODIFIED_FILES" ]]; then
            echo "No modified files to scan."
            exit 0
          fi
          for file in $MODIFIED_FILES; do
            echo "Scanning $file..."
            python3 Vulnerability_Tool/Vulnerability_Scanner_V1.4.py "$file" >> security_scan_report.txt
          done

      - name: Save scan results as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-report
          path: security_scan_report.txt
