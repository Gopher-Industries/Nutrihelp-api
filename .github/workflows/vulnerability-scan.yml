name: Manual Vulnerability & Test Scan

on:
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Set to true to run unit tests (may require DB). Default: false'
        required: false
        default: 'false'
      fail_on_critical:
        description: 'If true, the job will fail when the vulnerability_report.json contains CRITICAL issues. Default: false'
        required: false
        default: 'false'

env:
  NODE_VERSION: '20'

jobs:
  vulnerability-scan:
    name: Run vulnerability scans and tests (manual)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install npm dependencies
        run: npm ci
      - name: Setup Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Prepare Scanner Environment (V2)
        run: |
          node scripts/prepareScanner.js
          if [ ! -d Vulnerability_Tool_V2/venv ]; then
            echo "Scanner venv not created (Python missing or script skipped). Using system python.";
          fi

      - name: Run unit tests (mocha)
        if: ${{ github.event.inputs.run_tests == 'true' }}
        run: |
          echo "run_tests was set to true â€” running unit tests"
          if npm run | grep -q "test:unit"; then
            npm run test:unit
          elif npm run | grep -q "test:rce"; then
            npm run test:rce || true
          else
            echo "No test script found (test:unit/test:rce). Skipping tests.";
          fi

      - name: Run npm audit and save JSON
        run: |
          npm audit --json > npm_audit.json || true

      - name: Run Vulnerability_Tool_V2 - JSON output
        run: |
          PYEXEC="python3"
          if [ -f Vulnerability_Tool_V2/venv/bin/python ]; then PYEXEC="Vulnerability_Tool_V2/venv/bin/python"; fi
          if [ -f Vulnerability_Tool_V2/scanner_v2.py ]; then
            $PYEXEC Vulnerability_Tool_V2/scanner_v2.py --target . --format json --output vulnerability_report.json || true
          else
            echo "Vulnerability_Tool_V2/scanner_v2.py not found" > vulnerability_report.json
          fi

      - name: Run Vulnerability_Tool_V2 - HTML output
        run: |
          PYEXEC="python3"
            if [ -f Vulnerability_Tool_V2/venv/bin/python ]; then PYEXEC="Vulnerability_Tool_V2/venv/bin/python"; fi
          if [ -f Vulnerability_Tool_V2/scanner_v2.py ]; then
            $PYEXEC Vulnerability_Tool_V2/scanner_v2.py --target . --format html --output vulnerability_report.html || true
          else
            echo "Vulnerability_Tool_V2/scanner_v2.py not found" > vulnerability_report.html
          fi

      - name: Collect generated reports
        run: |
          ls -la || true
          echo "Collected artifacts:"; ls -la *.html *.txt npm_audit.json || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan-reports
          path: |
            vulnerability_report.json
            vulnerability_report.html
            vulnerability_tool_report.txt
            npm_audit.json

      - name: Fail on critical findings (optional)
        if: ${{ github.event.inputs.fail_on_critical == 'true' }}
        run: |
          echo "Checking vulnerability_report.json for CRITICAL findings..."
          python3 scripts/ci_check_vuln.py
